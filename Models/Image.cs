using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using PUCCI.Models.Audit;
using PUCCI.Models.Interfaces;
using Docker.DotNet;
using Docker.DotNet.Models;

namespace PUCCI.Models
{
    public class Image : AuditModel, IImage
    {
        public void Create(IFormFile Dockerfile, string savePath)
        {
			SaveDockerfile(Dockerfile, savePath);

            try
			{
				var shell = "";
				var command = $"docker build -t {Name} -f {DockerfilePath} wwwroot/Dockerfiles/";

				// Check environment
				// Need cmd for development and bash for when we dockerize
				if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
				{
					shell = "cmd.exe";
					command = "/C " + command;
				}
				else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
				{
					shell = "/bin/bash";
					command = "-c " + command;
				}

				using (var process = new Process())
				{
					process.StartInfo = new ProcessStartInfo
					{
						WindowStyle = ProcessWindowStyle.Hidden,
						FileName = shell,
						Arguments = command
					};
					process.Start();
					process.WaitForExit();
					while(!process.HasExited)
					{

					}
				}
			}
			catch
            {
                throw;
            }

			SetImageDetails();
        }

		private void SaveDockerfile(IFormFile Dockerfile, string savePath)
		{
			if (!Directory.Exists(savePath))
			{
				Directory.CreateDirectory(savePath);
			}

			var fileName = Path.GetFileName(Dockerfile.FileName);
			// Keep Dockerfile name unique
			fileName += Guid.NewGuid();
			var filePath = Path.Combine(savePath, fileName);

			using (FileStream stream = new FileStream(filePath, FileMode.Create))
			{
				Dockerfile.CopyTo(stream);
			}

			DockerfilePath = filePath;
		}

		private async void SetImageDetails()
		{
			var client = new DockerClientConfiguration()
				.CreateClient();

			var images = await client.Images.ListImagesAsync(new ImagesListParameters() { });

			var image = from img in images
						where img.RepoTags.Contains($"{Name}:latest")
						select (img.ID, img.Created);

			ImageID = image.First().ID;
			Tag = $"{Name}:latest";
			Created = image.First().Created.ToString();
		}


        // ID and Image ID are different
        // ID is Primary Key in DB and ImageID is generated by Docker
        public int? ID { get; set; }
        public string? ImageID { get; set; }
		public string? UserId { get; set; }
        [Required]
        public string? Name { get; set; }
        public string? Tag { get; set; }
        public string? Created { get; set; }

        // Path to Dockerfile in webroot
        public string? DockerfilePath { get; set; }
    }
}
